//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7091";
    }

    /**
     * @param searchTerm (optional) 
     * @return Success
     */
    employeesAll(searchTerm?: string | undefined): Observable<SwaggerResponse<EmployeeDetails[]>> {
        let url_ = this.baseUrl + "/employees?";
        if (searchTerm === null)
            throw new Error("The parameter 'searchTerm' cannot be null.");
        else if (searchTerm !== undefined)
            url_ += "searchTerm=" + encodeURIComponent("" + searchTerm) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processEmployeesAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEmployeesAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<EmployeeDetails[]>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<EmployeeDetails[]>>;
        }));
    }

    protected processEmployeesAll(response: HttpResponseBase): Observable<SwaggerResponse<EmployeeDetails[]>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [] as any;
                    for (let item of resultData200)
                        result200!.push(EmployeeDetails.fromJS(item));
                }
                else {
                    result200 = <any>null;
                }
                return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<EmployeeDetails[]>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    employees(body?: EmployeeDetails | undefined): Observable<SwaggerResponse<EmployeeDetails>> {
        let url_ = this.baseUrl + "/employees";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processEmployees(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEmployees(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<EmployeeDetails>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<EmployeeDetails>>;
        }));
    }

    protected processEmployees(response: HttpResponseBase): Observable<SwaggerResponse<EmployeeDetails>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = EmployeeDetails.fromJS(resultData200);
                return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<EmployeeDetails>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @param searchTerm (optional) 
     * @return Success
     */
    positions(searchTerm?: string | undefined): Observable<SwaggerResponse<PositionDetails[]>> {
        let url_ = this.baseUrl + "/positions?";
        if (searchTerm === null)
            throw new Error("The parameter 'searchTerm' cannot be null.");
        else if (searchTerm !== undefined)
            url_ += "searchTerm=" + encodeURIComponent("" + searchTerm) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processPositions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPositions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<PositionDetails[]>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<PositionDetails[]>>;
        }));
    }

    protected processPositions(response: HttpResponseBase): Observable<SwaggerResponse<PositionDetails[]>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [] as any;
                    for (let item of resultData200)
                        result200!.push(PositionDetails.fromJS(item));
                }
                else {
                    result200 = <any>null;
                }
                return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<PositionDetails[]>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @param ssn (optional) 
     * @return Success
     */
    hasSSN(ssn?: string | undefined): Observable<SwaggerResponse<boolean>> {
        let url_ = this.baseUrl + "/hasSSN?";
        if (ssn === null)
            throw new Error("The parameter 'ssn' cannot be null.");
        else if (ssn !== undefined)
            url_ += "ssn=" + encodeURIComponent("" + ssn) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processHasSSN(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHasSSN(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<boolean>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<boolean>>;
        }));
    }

    protected processHasSSN(response: HttpResponseBase): Observable<SwaggerResponse<boolean>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;

                return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<boolean>>(new SwaggerResponse(status, _headers, null as any));
    }
}

export class EmployeeDetails implements IEmployeeDetails {
    employeeId?: number;
    name?: string | undefined;
    ssn?: string | undefined;
    dob?: Date;
    address?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zip?: string | undefined;
    phone?: string | undefined;
    joinDate?: Date;
    exitDate?: Date | undefined;
    currentTitle?: string | undefined;
    currentSalary?: number;

    constructor(data?: IEmployeeDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.employeeId = _data["employeeId"];
            this.name = _data["name"];
            this.ssn = _data["ssn"];
            this.dob = _data["dob"] ? new Date(_data["dob"].toString()) : <any>undefined;
            this.address = _data["address"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zip = _data["zip"];
            this.phone = _data["phone"];
            this.joinDate = _data["joinDate"] ? new Date(_data["joinDate"].toString()) : <any>undefined;
            this.exitDate = _data["exitDate"] ? new Date(_data["exitDate"].toString()) : <any>undefined;
            this.currentTitle = _data["currentTitle"];
            this.currentSalary = _data["currentSalary"];
        }
    }

    static fromJS(data: any): EmployeeDetails {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["employeeId"] = this.employeeId;
        data["name"] = this.name;
        data["ssn"] = this.ssn;
        data["dob"] = this.dob ? this.dob.toISOString() : <any>undefined;
        data["address"] = this.address;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zip"] = this.zip;
        data["phone"] = this.phone;
        data["joinDate"] = this.joinDate ? this.joinDate.toISOString() : <any>undefined;
        data["exitDate"] = this.exitDate ? this.exitDate.toISOString() : <any>undefined;
        data["currentTitle"] = this.currentTitle;
        data["currentSalary"] = this.currentSalary;
        return data;
    }
}

export interface IEmployeeDetails {
    employeeId?: number;
    name?: string | undefined;
    ssn?: string | undefined;
    dob?: Date;
    address?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zip?: string | undefined;
    phone?: string | undefined;
    joinDate?: Date;
    exitDate?: Date | undefined;
    currentTitle?: string | undefined;
    currentSalary?: number;
}

export class PositionDetails implements IPositionDetails {
    title?: string | undefined;
    minSalary?: number;
    maxSalary?: number;

    constructor(data?: IPositionDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.minSalary = _data["minSalary"];
            this.maxSalary = _data["maxSalary"];
        }
    }

    static fromJS(data: any): PositionDetails {
        data = typeof data === 'object' ? data : {};
        let result = new PositionDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["minSalary"] = this.minSalary;
        data["maxSalary"] = this.maxSalary;
        return data;
    }
}

export interface IPositionDetails {
    title?: string | undefined;
    minSalary?: number;
    maxSalary?: number;
}

export class SwaggerResponse<TResult> {
    status: number;
    headers: { [key: string]: any; };
    result: TResult;

    constructor(status: number, headers: { [key: string]: any; }, result: TResult) {
        this.status = status;
        this.headers = headers;
        this.result = result;
    }
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}